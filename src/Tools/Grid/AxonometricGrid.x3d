<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 4.0//EN" "http://www.web3d.org/specifications/x3d-4.0.dtd">
<X3D profile='Interchange' version='4.0' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='http://www.web3d.org/specifications/x3d-4.0.xsd'>
  <head>
    <component name='Scripting' level='1'/>
    <unit category='angle' name='degree' conversionFactor='0.017453292519943295'/>
    <meta name='comment' content='Rise and Shine'/>
    <meta name='created' content='Tue, 05 Aug 2014 20:06:52 GMT'/>
    <meta name='creator' content='Holger Seelig'/>
    <meta name='generator' content='Sunrize X3D Editor V1.5.2, https://create3000.github.io/sunrize/'/>
    <meta name='identifier' content='file:///home/holger/Projekte/Titania/libtitania-x3d/share/titania/tools/library/AxonometricGrid.x3dv'/>
    <meta name='modified' content='Tue, 06 Feb 2024 19:16:12 GMT'/>
  </head>
  <Scene>
    <ProtoDeclare name='AxonometricGrid'>
      <ProtoInterface>
        <field accessType='inputOutput' type='SFVec3f' name='translation'/>
        <field accessType='inputOutput' type='SFRotation' name='rotation'/>
        <field accessType='inputOutput' type='SFVec3f' name='scale' value='1 1 1'/>
        <field accessType='inputOutput' type='MFInt32' name='dimension' value='5, 10'/>
        <field accessType='inputOutput' type='SFVec2d' name='angle' value='1.0471975511966 1.0471975511966'/>
        <field accessType='inputOutput' type='MFInt32' name='majorLineEvery' value='5, 5, 5, 5'/>
        <field accessType='inputOutput' type='MFInt32' name='majorLineOffset' value='0, 0, 0, 0'/>
        <field accessType='inputOutput' type='SFColor' name='color' value='0.5 0.5 0.5'/>
        <field accessType='inputOutput' type='SFFloat' name='transparency' value='0.8'/>
        <field accessType='inputOutput' type='SFColor' name='lineColor' value='0.9647059 0.6980392 0.4196078'/>
        <field accessType='inputOutput' type='SFFloat' name='lineTransparency' value='0.8'/>
        <field accessType='inputOutput' type='SFColor' name='majorLineColor' value='0.9647059 0.6980392 0.4196078'/>
        <field accessType='inputOutput' type='SFFloat' name='majorLineTransparency' value='0.6'/>
        <field accessType='initializeOnly' type='SFBool' name='solid' value='true'/>
      </ProtoInterface>
      <ProtoBody>
        <Transform>
          <IS>
            <connect nodeField='rotation' protoField='rotation'/>
          </IS>
          <Transform>
            <IS>
              <connect nodeField='translation' protoField='translation'/>
              <connect nodeField='scale' protoField='scale'/>
            </IS>
            <Shape DEF='HexagonPlane'
                castShadow='false'>
              <Appearance>
                <UnlitMaterial DEF='Material2'>
                  <IS>
                    <connect nodeField='emissiveColor' protoField='color'/>
                    <connect nodeField='transparency' protoField='transparency'/>
                  </IS>
                </UnlitMaterial>
              </Appearance>
              <IndexedFaceSet
                  coordIndex='0, 1, 2, 3, 4, 5, -1'>
                <IS>
                  <connect nodeField='solid' protoField='solid'/>
                </IS>
                <Coordinate DEF='HexagonCoord'
                    point='5 0 0, 2.5 0 -4.33013, -2.5 0 -4.33013, -5 -0 -0, -2.5 -0 4.33013, 2.5 -0 4.33013'/>
              </IndexedFaceSet>
            </Shape>
            <Shape DEF='MajorGrid'
                castShadow='false'>
              <Appearance>
                <UnlitMaterial DEF='MajorMaterial'>
                  <IS>
                    <connect nodeField='emissiveColor' protoField='majorLineColor'/>
                    <connect nodeField='transparency' protoField='majorLineTransparency'/>
                  </IS>
                </UnlitMaterial>
              </Appearance>
              <IndexedLineSet DEF='MajorGrid_2'
                  coordIndex='0, 1, -1, 2, 3, -1, 4, 5, -1, 6, 7, -1, 8, 9, -1, 10, 11, -1, 12, 13, -1, 14, 15, -1, 16, 17, -1'>
                <Coordinate
                    point='-5.125 0 0.216507, -2.375 0 -4.54663, -2.625 0 4.54663, 2.625 0 -4.54663, 2.375 0 4.54663, 5.125 0 -0.216507, -2.75 0 -4.33013, 2.75 0 -4.33013, -5.25 0 0, 5.25 0 0, -2.75 0 4.33013, 2.75 0 4.33013, 2.375 0 -4.54663, 5.125 0 0.216507, -2.625 0 -4.54663, 2.625 0 4.54663, -5.125 0 -0.216507, -2.375 0 4.54663'/>
              </IndexedLineSet>
            </Shape>
            <Shape DEF='MinorGrid'
                castShadow='false'>
              <Appearance>
                <UnlitMaterial DEF='MinorMaterial'>
                  <IS>
                    <connect nodeField='emissiveColor' protoField='lineColor'/>
                    <connect nodeField='transparency' protoField='lineTransparency'/>
                  </IS>
                </UnlitMaterial>
              </Appearance>
              <IndexedLineSet DEF='MinorGrid_3'
                  coordIndex='0, 1, -1, 2, 3, -1, 4, 5, -1, 6, 7, -1, 8, 9, -1, 10, 11, -1, 12, 13, -1, 14, 15, -1, 16, 17, -1, 18, 19, -1, 20, 21, -1, 22, 23, -1, 24, 25, -1, 26, 27, -1, 28, 29, -1, 30, 31, -1, 32, 33, -1, 34, 35, -1, 36, 37, -1, 38, 39, -1, 40, 41, -1, 42, 43, -1, 44, 45, -1, 46, 47, -1'>
                <Coordinate
                    point='-4.5 0 0.866026, -1.5 0 -4.33013, -4 0 1.73205, -0.5 0 -4.33013, -3.5 0 2.59808, 0.5 0 -4.33013, -3 0 3.4641, 1.5 0 -4.33013, -1.5 0 4.33013, 3 0 -3.4641, -0.5 0 4.33013, 3.5 0 -2.59808, 0.5 0 4.33013, 4 0 -1.73205, 1.5 0 4.33013, 4.5 0 -0.866026, -3 0 -3.4641, 3 0 -3.4641, -3.5 0 -2.59808, 3.5 0 -2.59808, -4 0 -1.73205, 4 0 -1.73205, -4.5 0 -0.866025, 4.5 0 -0.866025, -4.5 0 0.866025, 4.5 0 0.866025, -4 0 1.73205, 4 0 1.73205, -3.5 0 2.59808, 3.5 0 2.59808, -3 0 3.4641, 3 0 3.4641, 1.5 0 -4.33013, 4.5 0 0.866026, 0.5 0 -4.33013, 4 0 1.73205, -0.5 0 -4.33013, 3.5 0 2.59808, -1.5 0 -4.33013, 3 0 3.4641, -3 0 -3.4641, 1.5 0 4.33013, -3.5 0 -2.59808, 0.5 0 4.33013, -4 0 -1.73205, -0.5 0 4.33013, -4.5 0 -0.866026, -1.5 0 4.33013'/>
              </IndexedLineSet>
            </Shape>
            <Shape DEF='MajorPoints'
                castShadow='false'>
              <Appearance>
                <LineProperties
                    linewidthScaleFactor='6'/>
                <UnlitMaterial USE='MajorMaterial'/>
              </Appearance>
              <PointSet DEF='MajorPoints_4'>
                <Coordinate
                    point='0 -5 0, 0 0 0, 0 5 0'/>
              </PointSet>
            </Shape>
            <Shape DEF='MinorPoints'
                castShadow='false'>
              <Appearance>
                <LineProperties
                    linewidthScaleFactor='4'/>
                <UnlitMaterial USE='MinorMaterial'/>
              </Appearance>
              <PointSet DEF='MinorPoints_5'>
                <Coordinate
                    point='0 -4 0, 0 -3 0, 0 -2 0, 0 -1 0, 0 1 0, 0 2 0, 0 3 0, 0 4 0'/>
              </PointSet>
            </Shape>
          </Transform>
        </Transform>
        <Script DEF='GridScript'
            directOutput='true'
            mustEvaluate='true'>
          <field accessType='inputOutput' type='MFInt32' name='dimension'/>
          <field accessType='inputOutput' type='SFVec2d' name='angle'/>
          <field accessType='inputOutput' type='MFInt32' name='majorLineEvery'/>
          <field accessType='inputOutput' type='MFInt32' name='majorLineOffset'/>
          <field accessType='initializeOnly' type='SFNode' name='hexagon'>
            <Coordinate USE='HexagonCoord'/>
          </field>
          <field accessType='initializeOnly' type='SFNode' name='majorGrid'>
            <IndexedLineSet USE='MajorGrid_2'/>
          </field>
          <field accessType='initializeOnly' type='SFNode' name='minorGrid'>
            <IndexedLineSet USE='MinorGrid_3'/>
          </field>
          <field accessType='initializeOnly' type='SFNode' name='majorPoints'>
            <PointSet USE='MajorPoints_4'/>
          </field>
          <field accessType='initializeOnly' type='SFNode' name='minorPoints'>
            <PointSet USE='MinorPoints_5'/>
          </field>
          <IS>
            <connect nodeField='dimension' protoField='dimension'/>
            <connect nodeField='angle' protoField='angle'/>
            <connect nodeField='majorLineEvery' protoField='majorLineEvery'/>
            <connect nodeField='majorLineOffset' protoField='majorLineOffset'/>
          </IS>
<![CDATA[ecmascript:

function initialize ()
{
	eventsProcessed ();
}

function eventsProcessed ()
{
	var angles     = new SFVec3f (angle [0], angle [1], Math .PI - angle [0] - angle [1])
	var u          = Math .sin (angles [1]) / Math .sin (angles [2]);
	var v          = 1;
	var t          = Math .sin (angles [0]) / Math .sin (angles [2]);
	var sides      = new SFVec3f (u, 1, t);
	var heightU    = v * Math .sin (angles [0]);
	var heightV    = t * Math .sin (angles [1]);
	var heightT    = u * Math .sin (angles [2]);
	var heights    = new SFVec3f (heightU, heightV, heightT);

	// Axonometric grid

	generateGrid (true,  majorGrid, angles, sides, heights);
	generateGrid (false, minorGrid, angles, sides, heights);

	// Points

	generatePoints (true,  majorPoints .coord .point);
	generatePoints (false, minorPoints .coord .point);

	// Hexagon plane

	hexagon .point [0] = new SFVec3f (v, 0, 0) .multiply (dimension [0]);
	hexagon .point [1] = new SFRotation (0, 1, 0, angles [0])              .multVec (new SFVec3f (u * dimension [0], 0, 0));
	hexagon .point [2] = new SFRotation (0, 1, 0, angles [0] + angles [2]) .multVec (new SFVec3f (t * dimension [0], 0, 0));
	hexagon .point [3] = hexagon .point [0] .negate ();
	hexagon .point [4] = hexagon .point [1] .negate ();
	hexagon .point [5] = hexagon .point [2] .negate ();
}

function generateGrid (major, grid, angles, sides, heights)
{
	var coordIndex = new MFInt32 ();
	var p          = 0;

	p = generateGridAxis (0,  angle [0], angles, sides, heights, major, grid, coordIndex, p);
	p = generateGridAxis (1,  0,         angles, sides, heights, major, grid, coordIndex, p);
	p = generateGridAxis (2, -angle [1], angles, sides, heights, major, grid, coordIndex, p);

	grid .coord .point .length = p;
	grid .set_coordIndex = coordIndex;
}

function generateGridAxis (axis, angle, angles, sides, heights, major, grid, coordIndex, p)
{
	var point     = grid .coord .point;
	var majorAdd  = major / 4;
	var scale_2   = dimension [0];
	var rotation  = new SFRotation (0, 1, 0, angle);
	var height    = heights [axis];
	var side      = sides [axis];
	var dMap      = [ 1, 1, 0, 0, 1, 1 ];
	var eMap      = [ 0, 1, 0 ];
	var lMap      = [ 2, 0, 1 ];
	var rMap      = [ 1, 2, 0 ];
	var left      = Math .sqrt (Math .pow (sides [lMap [axis]], 2) - Math .pow (heights [axis], 2));
	var right     = Math .sqrt (Math .pow (sides [rMap [axis]], 2) - Math .pow (heights [axis], 2));

	for (var n = 0, size = dimension [0] * 2 + 1; n < size; ++ n)
	{
		if (major - isMajorLine (n, axis, 0, 2))
			continue;

		var i = n - scale_2;
		var x = scale_2 * side + majorAdd;
		var l = i > 0 ? right * i : left  * -i;
		var r = i > 0 ? left  * i : right * -i;
		var z = i * height;
		var e = eMap [axis] ? i < 0 : i > 0;

		if (e)
		{
			if (dMap [axis] && angles [0] > Math .PI / 2)
				l = -l;
		}
		else
		{
			if (dMap [axis] && angles [0] > Math .PI / 2)
				r = -r;
		}

		if (e)
		{
			if (dMap [axis + 3] && angles [1] > Math .PI / 2)
				r = -r;
		}
		else
		{
			if (dMap [axis + 3] && angles [1] > Math .PI / 2)
				l = -l;
		}

		point [p]     = rotation .multVec (new SFVec3f (-x + l, 0, z));
		point [p + 1] = rotation .multVec (new SFVec3f ( x - r, 0, z));
		coordIndex [coordIndex .length] = p;
		coordIndex [coordIndex .length] = p + 1;
		coordIndex [coordIndex .length] = -1;

		p += 2;
	}

	return p;
}

function generatePoints (major, point)
{
	var scaleY_2 = -dimension [1] / 2;
	var p         = 0;

	for (var i = 0, size = dimension [1] + 1; i < size; ++ i)
	{
		if (major - isMajorLine (i, 3, 1, 1))
			continue;

		point [p] = new SFVec3f (0, scaleY_2 + i, 0);
		++ p;
	}

	point .length = p;
}

function isMajorLine (i, index, di, f)
{
	for (var d = index; d < majorLineEvery .length; d += 4)
	{
		if (isMajor (i, dimension [di] * f, majorLineEvery [d], majorLineOffset [d]))
			return true;
	}

	return false;
}

function isMajor (i, dimension, majorLineEvery, majorLineOffset)
{
	if (majorLineEvery)
	{
		var index = Math .floor (i - dimension / 2 - majorLineOffset);

		return !(index % majorLineEvery);
	}

	return false;
}
]]>
        </Script>
      </ProtoBody>
    </ProtoDeclare>
    <ProtoInstance name='AxonometricGrid'/>
  </Scene>
</X3D>
