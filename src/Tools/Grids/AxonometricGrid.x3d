<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 4.0//EN" "http://www.web3d.org/specifications/x3d-4.0.dtd">
<X3D profile='Interchange' version='4.0' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='http://www.web3d.org/specifications/x3d-4.0.xsd'>
  <head>
    <component name='Scripting' level='1'/>
    <unit category='angle' name='degree' conversionFactor='0.017453292519943295'/>
    <meta name='comment' content='Rise and Shine'/>
    <meta name='created' content='Tue, 05 Aug 2014 20:06:52 GMT'/>
    <meta name='creator' content='Holger Seelig'/>
    <meta name='generator' content='Sunrize X3D Editor V1.7.1, https://create3000.github.io/sunrize/'/>
    <meta name='identifier' content='file:///home/holger/Projekte/Titania/libtitania-x3d/share/titania/tools/library/AxonometricGrid.x3dv'/>
    <meta name='modified' content='Sat, 29 Jun 2024 10:49:53 GMT'/>
  </head>
  <Scene>
    <ExternProtoDeclare name='ToolShader' url='"../Shaders/ToolShader.x3d"'/>
    <ProtoDeclare name='AxonometricGrid'>
      <ProtoInterface>
        <field accessType='inputOutput' type='SFVec3f' name='translation'/>
        <field accessType='inputOutput' type='SFRotation' name='rotation'/>
        <field accessType='inputOutput' type='SFVec3f' name='scale' value='1 1 1'/>
        <field accessType='inputOutput' type='MFInt32' name='dimension' value='5, 10'/>
        <field accessType='inputOutput' type='SFVec2d' name='angles' value='1.0471975511966 1.0471975511966'/>
        <field accessType='inputOutput' type='MFInt32' name='majorLineEvery' value='5, 5, 5, 5'/>
        <field accessType='inputOutput' type='MFInt32' name='majorLineOffset' value='0, 0, 0, 0'/>
        <field accessType='inputOutput' type='SFColor' name='color' value='0.5 0.5 0.5'/>
        <field accessType='inputOutput' type='SFFloat' name='transparency' value='0.8'/>
        <field accessType='inputOutput' type='SFColor' name='lineColor' value='0.9647059 0.6980392 0.4196078'/>
        <field accessType='inputOutput' type='SFFloat' name='lineTransparency' value='0.8'/>
        <field accessType='inputOutput' type='SFColor' name='majorLineColor' value='0.9647059 0.6980392 0.4196078'/>
        <field accessType='inputOutput' type='SFFloat' name='majorLineTransparency' value='0.6'/>
        <field accessType='initializeOnly' type='SFBool' name='solid' value='true'/>
      </ProtoInterface>
      <ProtoBody>
        <Transform>
          <IS>
            <connect nodeField='rotation' protoField='rotation'/>
          </IS>
          <Transform>
            <IS>
              <connect nodeField='translation' protoField='translation'/>
              <connect nodeField='scale' protoField='scale'/>
            </IS>
            <Shape DEF='HexagonPlane'
                castShadow='false'>
              <Appearance>
                <Material DEF='Material2'
                    diffuseColor='0 0 0'>
                  <IS>
                    <connect nodeField='emissiveColor' protoField='color'/>
                    <connect nodeField='transparency' protoField='transparency'/>
                  </IS>
                </Material>
                <ProtoInstance name='ToolShader' DEF='_999' containerField='shaders'/>
              </Appearance>
              <IndexedFaceSet
                  coordIndex='0, 1, 2, 3, 4, 5, -1'>
                <IS>
                  <connect nodeField='solid' protoField='solid'/>
                </IS>
                <Coordinate DEF='HexagonCoord'/>
              </IndexedFaceSet>
            </Shape>
            <Shape DEF='MajorGrid'>
              <Appearance>
                <Material DEF='MajorMaterial'
                    diffuseColor='0 0 0'>
                  <IS>
                    <connect nodeField='emissiveColor' protoField='majorLineColor'/>
                    <connect nodeField='transparency' protoField='majorLineTransparency'/>
                  </IS>
                </Material>
                <ProtoInstance name='ToolShader' USE='_999' containerField='shaders'/>
              </Appearance>
              <IndexedLineSet DEF='MajorGrid_2'>
                <Coordinate/>
              </IndexedLineSet>
            </Shape>
            <Shape DEF='MinorGrid'
                pointerEvents='false'
                castShadow='false'>
              <Appearance>
                <Material DEF='MinorMaterial'
                    diffuseColor='0 0 0'>
                  <IS>
                    <connect nodeField='emissiveColor' protoField='lineColor'/>
                    <connect nodeField='transparency' protoField='lineTransparency'/>
                  </IS>
                </Material>
                <ProtoInstance name='ToolShader' USE='_999' containerField='shaders'/>
              </Appearance>
              <IndexedLineSet DEF='MinorGrid_3'>
                <Coordinate/>
              </IndexedLineSet>
            </Shape>
            <Shape DEF='MajorPoints'
                pointerEvents='false'
                castShadow='false'>
              <Appearance>
                <PointProperties
                    pointSizeScaleFactor='6'
                    pointSizeMinValue='6'
                    pointSizeMaxValue='6'/>
                <Material USE='MajorMaterial'/>
                <ProtoInstance name='ToolShader' USE='_999' containerField='shaders'/>
              </Appearance>
              <PointSet DEF='MajorPoints_4'>
                <Coordinate/>
              </PointSet>
            </Shape>
            <Shape DEF='MinorPoints'
                pointerEvents='false'
                castShadow='false'>
              <Appearance>
                <PointProperties
                    pointSizeScaleFactor='4'
                    pointSizeMinValue='4'
                    pointSizeMaxValue='4'/>
                <Material USE='MinorMaterial'/>
                <ProtoInstance name='ToolShader' USE='_999' containerField='shaders'/>
              </Appearance>
              <PointSet DEF='MinorPoints_5'>
                <Coordinate/>
              </PointSet>
            </Shape>
          </Transform>
        </Transform>
        <Script DEF='GridScript'
            directOutput='true'
            mustEvaluate='true'>
          <field accessType='inputOutput' type='MFInt32' name='dimension'/>
          <field accessType='inputOutput' type='SFVec2d' name='angles'/>
          <field accessType='inputOutput' type='MFInt32' name='majorLineEvery'/>
          <field accessType='inputOutput' type='MFInt32' name='majorLineOffset'/>
          <field accessType='initializeOnly' type='SFNode' name='hexagon'>
            <Coordinate USE='HexagonCoord'/>
          </field>
          <field accessType='initializeOnly' type='SFNode' name='majorGrid'>
            <IndexedLineSet USE='MajorGrid_2'/>
          </field>
          <field accessType='initializeOnly' type='SFNode' name='minorGrid'>
            <IndexedLineSet USE='MinorGrid_3'/>
          </field>
          <field accessType='initializeOnly' type='SFNode' name='majorPoints'>
            <PointSet USE='MajorPoints_4'/>
          </field>
          <field accessType='initializeOnly' type='SFNode' name='minorPoints'>
            <PointSet USE='MinorPoints_5'/>
          </field>
          <IS>
            <connect nodeField='dimension' protoField='dimension'/>
            <connect nodeField='angles' protoField='angles'/>
            <connect nodeField='majorLineEvery' protoField='majorLineEvery'/>
            <connect nodeField='majorLineOffset' protoField='majorLineOffset'/>
          </IS>
<![CDATA[ecmascript:

function initialize ()
{
   eventsProcessed ();
}

function eventsProcessed ()
{
   const
      a = angles [0],
      b = angles [1],
      c = Math .PI - a - b,
      u = Math .sin (b) / Math .sin (c),
      v = 1,
      t = Math .sin (a) / Math .sin (c);

   // Hexagon plane

   hexagon .point [0] = new SFVec3f (v, 0, 0) .multiply (dimension [0]);
   hexagon .point [1] = new SFRotation (0, 1, 0, a) .multVec (new SFVec3f (u * dimension [0], 0, 0));
   hexagon .point [2] = new SFRotation (0, 1, 0, Math .PI - b) .multVec (new SFVec3f (t * dimension [0], 0, 0));
   hexagon .point [3] = hexagon .point [0] .negate ();
   hexagon .point [4] = hexagon .point [1] .negate ();
   hexagon .point [5] = hexagon .point [2] .negate ();

   // Axonometric grid

   generateGrid (true,  majorGrid, hexagon .point);
   generateGrid (false, minorGrid, hexagon .point);

   // Points

   generatePoints (true,  majorPoints .coord .point);
   generatePoints (false, minorPoints .coord .point);
}

function generateGrid (major, grid, hexagon)
{
   var coordIndex = new MFInt32 ();
   var p          = 0;

   p = generateGridAxis (0, hexagon, major, grid, coordIndex, p);
   p = generateGridAxis (1, hexagon, major, grid, coordIndex, p);
   p = generateGridAxis (2, hexagon, major, grid, coordIndex, p);

   grid .coord .point .length = p;
   grid .set_coordIndex       = coordIndex;
}

function generateGridAxis (axis, hexagon, major, grid, coordIndex, p)
{
   const point = grid .coord .point;

   const pn = [
      hexagon [(axis + 0) % 6],
      hexagon [(axis + 1) % 6],
      hexagon [(axis + 2) % 6],
      hexagon [(axis + 3) % 6],
      hexagon [(axis + 4) % 6],
      hexagon [(axis + 5) % 6],
   ];

   for (let n = 0, size = dimension [0] * 2 + 1; n < size; ++ n)
   {
      if (major - isMajorLine (n, axis, 0, 2))
         continue;

      const
         s = n - dimension [0],
         a = pn [s < 0 ? 0 : 5],
         b = pn [s < 0 ? 5 : 4],
         c = pn [s < 0 ? 1 : 2],
         d = pn [s < 0 ? 2 : 3],
         t = n / (size - 1) * 2 - (s < 0 ? 0 : 1);

      const
         p1  = a .lerp (b, t),
         p2  = c .lerp (d, t)
         add = major / (4 * p1 .distance (p2));

      point [p]     = p1 .lerp (p2, 0 - add);
      point [p + 1] = p1 .lerp (p2, 1 + add);

      coordIndex [coordIndex .length] = p;
      coordIndex [coordIndex .length] = p + 1;
      coordIndex [coordIndex .length] = -1;

      p += 2;
   }

   return p;
}

function generatePoints (major, point)
{
   var scaleY_2 = -dimension [1] / 2;
   var p         = 0;

   for (var i = 0, size = dimension [1] + 1; i < size; ++ i)
   {
      if (major - isMajorLine (i, 3, 1, 1))
         continue;

      point [p] = new SFVec3f (0, scaleY_2 + i, 0);
      ++ p;
   }

   point .length = p;
}

function isMajorLine (i, index, di, f)
{
   for (var d = index; d < majorLineEvery .length; d += 4)
   {
      if (isMajor (i, dimension [di] * f, majorLineEvery [d], majorLineOffset [d]))
         return true;
   }

   return false;
}

function isMajor (i, dimension, majorLineEvery, majorLineOffset)
{
   if (majorLineEvery)
   {
      var index = Math .floor (i - dimension / 2 - majorLineOffset);

      return !(index % majorLineEvery);
   }

   return false;
}
]]>
        </Script>
      </ProtoBody>
    </ProtoDeclare>
  </Scene>
</X3D>
