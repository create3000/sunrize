<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 4.0//EN" "http://www.web3d.org/specifications/x3d-4.0.dtd">
<X3D profile='Interchange' version='4.0' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='http://www.web3d.org/specifications/x3d-4.0.xsd'>
  <head>
    <component name='Geometry2D' level='2'/>
    <component name='Scripting' level='1'/>
    <meta name='comment' content='Rise and Shine'/>
    <meta name='created' content='Thu, 15 Jun 2017 07:19:14 GMT'/>
    <meta name='creator' content='Holger Seelig'/>
    <meta name='generator' content='Sunrize X3D Editor V1.6.2, https://create3000.github.io/sunrize/'/>
    <meta name='identifier' content='file:///home/holger/Projekte/Titania/libtitania-x3d/share/titania/tools/library/AngleGrid.x3dv'/>
    <meta name='modified' content='Mon, 11 Mar 2024 11:02:27 GMT'/>
    <meta name='titania-add-world-info' content='true'/>
  </head>
  <Scene>
    <ProtoDeclare name='AngleGrid'>
      <ProtoInterface>
        <field accessType='inputOutput' type='SFVec3f' name='translation'/>
        <field accessType='inputOutput' type='SFRotation' name='rotation'/>
        <field accessType='inputOutput' type='SFVec3f' name='scale' value='1 1 1'/>
        <field accessType='inputOutput' type='MFInt32' name='dimension' value='5, 16, 10'/>
        <field accessType='inputOutput' type='MFInt32' name='majorLineEvery' value='5, 2, 5'/>
        <field accessType='inputOutput' type='MFInt32' name='majorLineOffset' value='0, 0, 0'/>
        <field accessType='inputOutput' type='SFColor' name='color' value='0.5 0.5 0.5'/>
        <field accessType='inputOutput' type='SFFloat' name='transparency' value='0.8'/>
        <field accessType='inputOutput' type='SFColor' name='lineColor' value='0.9647059 0.6980392 0.4196078'/>
        <field accessType='inputOutput' type='SFFloat' name='lineTransparency' value='0.8'/>
        <field accessType='inputOutput' type='SFColor' name='majorLineColor' value='0.9647059 0.6980392 0.4196078'/>
        <field accessType='inputOutput' type='SFFloat' name='majorLineTransparency' value='0.6'/>
        <field accessType='initializeOnly' type='SFBool' name='solid' value='true'/>
      </ProtoInterface>
      <ProtoBody>
        <Transform>
          <IS>
            <connect nodeField='rotation' protoField='rotation'/>
          </IS>
          <Transform>
            <IS>
              <connect nodeField='translation' protoField='translation'/>
              <connect nodeField='scale' protoField='scale'/>
            </IS>
            <Transform DEF='Disk'
                rotation='-5.2594820914624e-13 0.70710528118436 0.707108281185553 3.14159'
                scale='5 5 1'>
              <Shape
                  castShadow='false'>
                <Appearance>
                  <UnlitMaterial DEF='Material2'>
                    <IS>
                      <connect nodeField='emissiveColor' protoField='color'/>
                      <connect nodeField='transparency' protoField='transparency'/>
                    </IS>
                  </UnlitMaterial>
                </Appearance>
                <Disk2D>
                  <IS>
                    <connect nodeField='solid' protoField='solid'/>
                  </IS>
                </Disk2D>
              </Shape>
            </Transform>
            <Transform DEF='Rings'
                rotation='0 0.70710528118436 0.707108281185553 3.14159'/>
            <Shape DEF='MinorLines'
                pointerEvents='false'
                castShadow='false'>
              <Appearance DEF='MinorAppearance'>
                <UnlitMaterial DEF='_2'>
                  <IS>
                    <connect nodeField='emissiveColor' protoField='lineColor'/>
                    <connect nodeField='transparency' protoField='lineTransparency'/>
                  </IS>
                </UnlitMaterial>
              </Appearance>
              <IndexedLineSet DEF='MinorLines_3'>
                <Coordinate/>
              </IndexedLineSet>
            </Shape>
            <Shape DEF='MajorLines'
                pointerEvents='false'
                castShadow='false'>
              <Appearance DEF='MajorAppearance'>
                <UnlitMaterial DEF='MajorMaterial'>
                  <IS>
                    <connect nodeField='emissiveColor' protoField='majorLineColor'/>
                    <connect nodeField='transparency' protoField='majorLineTransparency'/>
                  </IS>
                </UnlitMaterial>
              </Appearance>
              <IndexedLineSet DEF='MajorLines_4'>
                <Coordinate/>
              </IndexedLineSet>
            </Shape>
            <Shape DEF='MinorPoints'
                pointerEvents='false'
                castShadow='false'>
              <Appearance>
                <PointProperties
                    pointSizeScaleFactor='4'
                    pointSizeMinValue='4'
                    pointSizeMaxValue='4'/>
                <UnlitMaterial USE='_2'/>
              </Appearance>
              <PointSet DEF='MinorPoints_5'>
                <Coordinate/>
              </PointSet>
            </Shape>
            <Shape DEF='MajorPoints'
                pointerEvents='false'
                castShadow='false'>
              <Appearance>
                <PointProperties
                    pointSizeScaleFactor='6'
                    pointSizeMinValue='6'
                    pointSizeMaxValue='6'/>
                <UnlitMaterial USE='MajorMaterial'/>
              </Appearance>
              <PointSet DEF='MajorPoints_6'>
                <Coordinate/>
              </PointSet>
            </Shape>
          </Transform>
        </Transform>
        <Script DEF='AngleGridScript'
            directOutput='true'
            mustEvaluate='true'>
          <field accessType='inputOutput' type='MFInt32' name='dimension'/>
          <field accessType='inputOutput' type='MFInt32' name='majorLineEvery'/>
          <field accessType='inputOutput' type='MFInt32' name='majorLineOffset'/>
          <field accessType='initializeOnly' type='SFNode' name='disk'>
            <Transform USE='Disk'/>
          </field>
          <field accessType='initializeOnly' type='SFNode' name='rings'>
            <Transform USE='Rings'/>
          </field>
          <field accessType='initializeOnly' type='SFNode' name='minorLines'>
            <IndexedLineSet USE='MinorLines_3'/>
          </field>
          <field accessType='initializeOnly' type='SFNode' name='majorLines'>
            <IndexedLineSet USE='MajorLines_4'/>
          </field>
          <field accessType='initializeOnly' type='SFNode' name='minorPoints'>
            <PointSet USE='MinorPoints_5'/>
          </field>
          <field accessType='initializeOnly' type='SFNode' name='majorPoints'>
            <PointSet USE='MajorPoints_6'/>
          </field>
          <field accessType='initializeOnly' type='SFNode' name='minorAppearance'>
            <Appearance USE='MinorAppearance'/>
          </field>
          <field accessType='initializeOnly' type='SFNode' name='majorAppearance'>
            <Appearance USE='MajorAppearance'/>
          </field>
          <IS>
            <connect nodeField='dimension' protoField='dimension'/>
            <connect nodeField='majorLineEvery' protoField='majorLineEvery'/>
            <connect nodeField='majorLineOffset' protoField='majorLineOffset'/>
          </IS>
<![CDATA[ecmascript:

function initialize ()
{
   eventsProcessed ();
}

function eventsProcessed ()
{
   var radius = dimension [0];

   // Plane

   disk .scale = new SFVec3f (radius, radius, 1);

   // Radiuses

   generateRadiuses (true,  radius, majorLines);
   generateRadiuses (false, radius, minorLines);

   // Rings

   generateRings ();

   // Points

   generatePoints (true,  majorPoints .coord .point);
   generatePoints (false, minorPoints .coord .point);
}

function generateRadiuses (major, radius, grid)
{
   var angle      = 2 * Math .PI / dimension [1];
   var coordIndex = new MFInt32 ();
   var point      = grid .coord .point;
   var p          = 0;

   point [p ++] = new SFVec3f ();

   for (var i = 0, c = 0; i < dimension [1]; ++ i)
   {
      if (major - isMajorLine (i, 1))
         continue;

      var a = angle * i;

      point [p] = new SFVec3f (radius * Math .sin (a), 0, radius * Math .cos (a));

      coordIndex [c ++] = 0;
      coordIndex [c ++] = p;
      coordIndex [c ++] = -1;

      ++ p;
   }

   point .length = p;

   grid .set_coordIndex = coordIndex;
}

function generateRings ()
{
   var scene = Browser .currentScene;
   var size  = Math .min (dimension [0], rings .children .length);

   for (var i = 0; i < size; ++ i)
   {
      var s         = i + 1;
      var transform = rings .children [i];
      var major     = isMajorLine (s, 0);

      transform .children [0] .appearance = major ? majorAppearance : minorAppearance;
      transform .scale                    = new SFVec3f (s, s, s);
   }

   for (var i = size; i < dimension [0]; ++ i)
   {
      var s         = i + 1;
      var circle    = scene .createNode ("Circle2D");
      var shape     = scene .createNode ("Shape");
      var transform = scene .createNode ("Transform");
      var major     = isMajorLine (s, 0);

      shape .pointerEvent     = false; 
      shape .appearance       = major ? majorAppearance : minorAppearance;
      shape .geometry         = circle;
      transform .children [0] = shape;
      transform .scale        = new SFVec3f (s, s, s);
      rings .children [i]     = transform;
   }

   rings .children .length = dimension [0];
}

function generatePoints (major, point)
{
   var scaleY1_2 = -dimension [2] / 2;
   var p         = 0;

   for (var i = 0, size = dimension [2] + 1; i < size; ++ i)
   {
      if (major - isMajorLineXYZ (i, 2))
         continue;

      point [p] = new SFVec3f (0, scaleY1_2 + i, 0);
      ++ p;
   }

   point .length = p;
}

function isMajorLine (i, index)
{
   for (var d = index; d < majorLineEvery .length; d += 3)
   {
      if (isMajor (i, dimension [index], majorLineEvery [d], majorLineOffset [d]))
         return true;
   }

   return false;
}

function isMajor (i, dimension, majorLineEvery, majorLineOffset)
{
   if (majorLineEvery)
   {
      var index = Math .floor (i - majorLineOffset);

      return !(index % majorLineEvery);
   }

   return false;
}

function isMajorLineXYZ (i, index)
{
   for (var d = index; d < majorLineEvery .length; d += 3)
   {
      if (isMajorXYZ (i, dimension [index], majorLineEvery [d], majorLineOffset [d]))
         return true;
   }

   return false;
}

function isMajorXYZ (i, dimension, majorLineEvery, majorLineOffset)
{
   if (majorLineEvery)
   {
      var index = Math .floor (i - dimension / 2 - majorLineOffset);

      return !(index % majorLineEvery);
   }

   return false;
}
]]>
        </Script>
      </ProtoBody>
    </ProtoDeclare>
  </Scene>
</X3D>
