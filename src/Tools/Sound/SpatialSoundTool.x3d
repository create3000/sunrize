<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 4.0//EN" "http://www.web3d.org/specifications/x3d-4.0.dtd">
<X3D profile='Interchange' version='4.0' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='http://www.web3d.org/specifications/x3d-4.0.xsd'>
  <head>
    <component name='Layout' level='2'/>
    <component name='Scripting' level='1'/>
    <unit category='angle' name='degree' conversionFactor='0.017453292519943295'/>
    <meta name='comment' content='Rise and Shine'/>
    <meta name='created' content='Thu, 18 Feb 2016 08:47:54 GMT'/>
    <meta name='creator' content='Holger Seelig'/>
    <meta name='generator' content='Sunrize X3D Editor V1.6.7, https://create3000.github.io/sunrize/'/>
    <meta name='modified' content='Tue, 26 Mar 2024 14:18:58 GMT'/>
  </head>
  <Scene>
    <ExternProtoDeclare name='ToolShader' url='"../Shaders/ToolShader.x3d"'/>
    <ExternProtoDeclare name='BooleanSwitch' url='"../Grouping/BooleanSwitch.x3d"'>
      <field accessType='inputOutput' type='SFBool' name='whichChoice'/>
      <field accessType='inputOutput' type='SFBool' name='visible'/>
      <field accessType='inputOutput' type='SFBool' name='bboxDisplay'/>
      <field accessType='initializeOnly' type='SFVec3f' name='bboxSize'/>
      <field accessType='initializeOnly' type='SFVec3f' name='bboxCenter'/>
      <field accessType='inputOnly' type='MFNode' name='addChildren'/>
      <field accessType='inputOnly' type='MFNode' name='removeChildren'/>
      <field accessType='inputOutput' type='MFNode' name='children'/>
    </ExternProtoDeclare>
    <ProtoDeclare name='SoundCone'>
      <ProtoInterface>
        <field accessType='inputOutput' type='SFInt32' name='dimension' value='10'/>
        <field accessType='inputOutput' type='SFFloat' name='coneAngle' value='6.283185'/>
        <field accessType='inputOutput' type='SFFloat' name='radius' value='1'/>
      </ProtoInterface>
      <ProtoBody>
        <LineSet DEF='_1'>
          <Coordinate/>
        </LineSet>
        <Script DEF='SoundConeScript'>
          <field accessType='inputOutput' type='SFInt32' name='dimension'/>
          <field accessType='inputOutput' type='SFFloat' name='coneAngle'/>
          <field accessType='inputOutput' type='SFFloat' name='radius'/>
          <field accessType='initializeOnly' type='SFNode' name='geometry'>
            <LineSet USE='_1'/>
          </field>
          <IS>
            <connect nodeField='dimension' protoField='dimension'/>
            <connect nodeField='coneAngle' protoField='coneAngle'/>
            <connect nodeField='radius' protoField='radius'/>
          </IS>
<![CDATA[ecmascript:

function initialize ()
{
   eventsProcessed ();
}

function eventsProcessed ()
{
   const
      uDimension  = dimension,
      vDimension  = Math .ceil ((dimension * coneAngle) / (4 * Math .PI)),
      angle       = coneAngle / 2,
      vertexCount = geometry .vertexCount,
      point       = geometry .coord .point;

   vertexCount .length = 0;
   point       .length = 0;

   for (let vd = 1; vd < vDimension; ++ vd)
   {
      const v = vd / (vDimension - 1) * angle;

      vertexCount .push (uDimension);

      for (let ud = 0; ud < uDimension; ++ ud)
      {
         const
            u = ud / (uDimension - 1) * Math .PI * 2,
            x = Math .sin (u) * Math .sin (v) * radius,
            y = Math .cos (v) * radius,
            z = Math .cos (u) * Math .sin (v) * radius;

         point .push (new SFVec3f (x, y, z));
      }
   }

   for (let ud = 0; ud < uDimension - 1; ++ ud)
   {
      const u = ud / (uDimension - 1) * Math .PI * 2;

      vertexCount .push (vDimension);

      for (let vd = 0; vd < vDimension; ++ vd)
      {
         const
            v = vd / (vDimension - 1) * angle,
            x = Math .sin (u) * Math .sin (v) * radius,
            y = Math .cos (v) * radius,
            z = Math .cos (u) * Math .sin (v) * radius;

         point .push (new SFVec3f (x, y, z));
      }
   }

   if (coneAngle > 6.283)
      return;

   for (let ud = 0; ud < uDimension - 1; ++ ud)
   {
      const u = ud / (uDimension - 1) * Math .PI * 2;

      vertexCount .push (2);

      const
         v = 1 * angle,
         x = Math .sin (u) * Math .sin (v) * radius,
         y = Math .cos (v) * radius,
         z = Math .cos (u) * Math .sin (v) * radius;

      point .push (new SFVec3f (), new SFVec3f (x, y, z));
   }
}
]]>
        </Script>
      </ProtoBody>
    </ProtoDeclare>
    <ProtoDeclare name='SpatialSoundTool'>
      <ProtoInterface>
        <field accessType='inputOutput' type='SFBool' name='selected'/>
        <field accessType='inputOutput' type='SFString' name='group' value='Transform'/>
        <field accessType='inputOutput' type='SFBool' name='grouping'/>
        <field accessType='inputOutput' type='SFBool' name='undo' value='true'/>
        <field accessType='inputOutput' type='SFVec3f' name='location'/>
        <field accessType='inputOutput' type='SFVec3f' name='direction' value='0 0 1'/>
        <field accessType='inputOutput' type='SFFloat' name='coneInnerAngle' value='6.283185'/>
        <field accessType='inputOutput' type='SFFloat' name='coneOuterAngle' value='6.283185'/>
        <field accessType='inputOutput' type='SFFloat' name='referenceDistance' value='1'/>
        <field accessType='outputOnly' type='SFNode' name='transformTool'/>
        <field accessType='outputOnly' type='SFString' name='activeTool'/>
        <field accessType='outputOnly' type='SFBool' name='isActive'/>
      </ProtoInterface>
      <ProtoBody>
        <Collision
            enabled='false'>
          <Transform DEF='SpatialSound'>
            <IS>
              <connect nodeField='translation' protoField='location'/>
            </IS>
            <ScreenGroup DEF='Speaker'>
              <Transform
                  rotation='-1 0 0 90'>
                <Transform DEF='Cone'>
                  <Shape
                      castShadow='false'>
                    <Appearance DEF='_2'>
                      <Material
                          diffuseColor='0.2705882 0.2705882 0.2705882'
                          specularColor='0.8627451 0.8588235 0.8588235'/>
                      <ProtoInstance name='ToolShader' containerField='shaders'/>
                    </Appearance>
                    <Cone
                        bottom='false'
                        height='20'
                        bottomRadius='24'
                        solid='false'/>
                  </Shape>
                </Transform>
                <Transform DEF='Cylinder'
                    translation='0 5 0'>
                  <Shape
                      castShadow='false'>
                    <Appearance USE='_2'/>
                    <Cylinder
                        height='10'
                        radius='12'/>
                  </Shape>
                </Transform>
              </Transform>
            </ScreenGroup>
            <Transform DEF='InnerCone'
                rotation='1 0 0 90'>
              <ProtoInstance name='BooleanSwitch'>
                <fieldValue name='children'>
                  <Shape DEF='_3'>
                    <Appearance>
                      <LineProperties DEF='_5'
                          linewidthScaleFactor='1'/>
                      <Material
                          diffuseColor='0 0 0'
                          emissiveColor='0.619608 0.184314 0.184314'/>
                      <ProtoInstance name='ToolShader' DEF='_13' containerField='shaders'/>
                    </Appearance>
                    <ProtoInstance name='SoundCone' DEF='_7' containerField='geometry'>
                      <fieldValue name='dimension' value='40'/>
                      <IS>
                        <connect nodeField='coneAngle' protoField='coneInnerAngle'/>
                        <connect nodeField='radius' protoField='referenceDistance'/>
                      </IS>
                    </ProtoInstance>
                  </Shape>
                  <Shape DEF='_6'>
                    <Appearance>
                      <LineProperties USE='_5'/>
                      <Material
                          diffuseColor='0 0 0'
                          emissiveColor='1 0.301961 0.301961'/>
                      <ProtoInstance name='ToolShader' USE='_13' containerField='shaders'/>
                    </Appearance>
                    <ProtoInstance name='SoundCone' USE='_7' containerField='geometry'/>
                  </Shape>
                </fieldValue>
                <IS>
                  <connect nodeField='whichChoice' protoField='selected'/>
                </IS>
              </ProtoInstance>
            </Transform>
            <Transform DEF='OuterCone'
                rotation='1 0 0 90'>
              <ProtoInstance name='BooleanSwitch'>
                <fieldValue name='children'>
                  <Shape DEF='_12'>
                    <Appearance>
                      <LineProperties USE='_5'/>
                      <Material
                          diffuseColor='0 0 0'
                          emissiveColor='0.184314 0.619608 0.258824'/>
                      <ProtoInstance name='ToolShader' USE='_13' containerField='shaders'/>
                    </Appearance>
                    <ProtoInstance name='SoundCone' DEF='_15' containerField='geometry'>
                      <fieldValue name='dimension' value='40'/>
                      <IS>
                        <connect nodeField='coneAngle' protoField='coneOuterAngle'/>
                        <connect nodeField='radius' protoField='referenceDistance'/>
                      </IS>
                    </ProtoInstance>
                  </Shape>
                  <Shape DEF='_14'>
                    <Appearance>
                      <LineProperties USE='_5'/>
                      <Material
                          diffuseColor='0 0 0'
                          emissiveColor='0.301961 1 0.415686'/>
                      <ProtoInstance name='ToolShader' USE='_13' containerField='shaders'/>
                    </Appearance>
                    <ProtoInstance name='SoundCone' USE='_15' containerField='geometry'/>
                  </Shape>
                </fieldValue>
                <IS>
                  <connect nodeField='whichChoice' protoField='selected'/>
                </IS>
              </ProtoInstance>
            </Transform>
          </Transform>
          <Transform DEF='TransformTool'>
            <IS>
              <connect nodeField='translation' protoField='location'/>
              <connect nodeField='visible' protoField='selected'/>
            </IS>
            <ScreenGroup>
              <Group
                  bboxSize='60 60 60'/>
            </ScreenGroup>
          </Transform>
        </Collision>
        <Script DEF='SpatialSoundScript'
            directOutput='true'>
          <field accessType='inputOutput' type='SFBool' name='active'/>
          <field accessType='inputOutput' type='SFVec3f' name='direction'/>
          <field accessType='initializeOnly' type='SFVec3f' name='upVector' value='0 1 0'/>
          <field accessType='inputOnly' type='SFRotation' name='set_rotation'/>
          <field accessType='outputOnly' type='SFString' name='activeTool'/>
          <field accessType='inputOutput' type='SFNode' name='transform'>
            <Transform USE='TransformTool'/>
          </field>
          <IS>
            <connect nodeField='active' protoField='isActive'/>
            <connect nodeField='direction' protoField='direction'/>
            <connect nodeField='activeTool' protoField='activeTool'/>
            <connect nodeField='transform' protoField='transformTool'/>
          </IS>
<![CDATA[ecmascript:

async function initialize ()
{
   const tool = await transform .getValue () .addTool () .getToolInstance ();

   Browser .addRoute (tool, "activeTool", this, "activeTool");
   Browser .addRoute (tool, "isActive",   this, "active");

   tool .undo          = false;
   tool .tools         = new MFString ("TRANSLATE", "ROTATE");
   tool .centerDisplay = false;
   tool .bboxEvents    = false;
   tool .bboxDisplay   = false;
}

let changing = false;

function set_direction (value)
{
   if (changing)
   {
      changing = false;
      return;
   }

   changing = true;

   transform .rotation = new SFRotation (new SFVec3f (0, 0, 1), value)
      .straighten (upVector);
}

function set_rotation (value)
{
   if (changing)
   {
      changing = false;
      return;
   }

   changing = true;

   direction = transform .rotation .multVec (new SFVec3f (0, 0, 1));
   upVector  = transform .rotation .multVec (new SFVec3f (0, 1, 0));
}
]]>
        </Script>
        <ROUTE fromNode='TransformTool' fromField='rotation_changed' toNode='SpatialSound' toField='set_rotation'/>
        <ROUTE fromNode='TransformTool' fromField='rotation_changed' toNode='SpatialSoundScript' toField='set_rotation'/>
      </ProtoBody>
    </ProtoDeclare>
  </Scene>
</X3D>
