<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 4.0//EN" "http://www.web3d.org/specifications/x3d-4.0.dtd">
<X3D profile='Interchange' version='4.0' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='http://www.web3d.org/specifications/x3d-4.0.xsd'>
  <head>
    <component name='Layout' level='2'/>
    <component name='Scripting' level='1'/>
    <unit category='angle' name='degree' conversionFactor='0.017453292519943295'/>
    <meta name='comment' content='Rise and Shine'/>
    <meta name='created' content='Fri, 01 Aug 2014 17:41:58 GMT'/>
    <meta name='creator' content='Holger Seelig'/>
    <meta name='generator' content='Sunrize X3D Editor V1.0.91, https://create3000.github.io/sunrize/'/>
    <meta name='identifier' content='file:///Users/holger/Desktop/X_ITE/sunrize/src/sunrize/Tools/TextureProjector/X3DTextureProjectorNodeTool.x3d'/>
    <meta name='modified' content='Thu, 17 Aug 2023 14:53:58 GMT'/>
  </head>
  <Scene>
    <ExternProtoDeclare name='ToolShader' url='"../Shaders/ToolShader.x3d"'>
    </ExternProtoDeclare>
    <ExternProtoDeclare name='BooleanSwitch' url='"../Grouping/BooleanSwitch.x3d"'>
      <field accessType='inputOutput' type='SFBool' name='whichChoice'/>
      <field accessType='inputOutput' type='SFBool' name='visible'/>
      <field accessType='inputOutput' type='SFBool' name='bboxDisplay'/>
      <field accessType='initializeOnly' type='SFVec3f' name='bboxSize'/>
      <field accessType='initializeOnly' type='SFVec3f' name='bboxCenter'/>
      <field accessType='inputOnly' type='MFNode' name='addChildren'/>
      <field accessType='inputOnly' type='MFNode' name='removeChildren'/>
      <field accessType='inputOutput' type='MFNode' name='children'/>
    </ExternProtoDeclare>
    <ProtoDeclare name='Tool'>
      <ProtoInterface>
        <field accessType='inputOutput' type='SFBool' name='selected'/>
        <field accessType='inputOutput' type='SFBool' name='on'/>
        <field accessType='inputOutput' type='SFVec3f' name='location'/>
        <field accessType='inputOutput' type='SFVec3f' name='direction'/>
        <field accessType='inputOutput' type='SFVec3f' name='upVector'/>
        <field accessType='inputOutput' type='MFFloat' name='parallelFieldOfView'/>
        <field accessType='inputOutput' type='SFFloat' name='parallelNearDistance'/>
        <field accessType='inputOutput' type='SFFloat' name='parallelFarDistance'/>
        <field accessType='inputOutput' type='SFFloat' name='parallelAspectRatio'/>
        <field accessType='inputOutput' type='SFFloat' name='perspectiveFieldOfView'/>
        <field accessType='inputOutput' type='SFFloat' name='perspectiveNearDistance'/>
        <field accessType='inputOutput' type='SFFloat' name='perspectiveFarDistance'/>
        <field accessType='inputOutput' type='SFFloat' name='perspectiveAspectRatio'/>
        <field accessType='inputOutput' type='SFNode' name='texture'/>
      </ProtoInterface>
      <ProtoBody>
        <Collision
            enabled='false'>
          <Transform DEF='Projector'>
            <ScreenGroup DEF='Beamer'>
              <Transform
                  translation='0 0 -15'>
                <Transform DEF='Cylinder'
                    translation='0 0 15'
                    rotation='1 0 0 90'>
                  <Shape
                      castShadow='false'>
                    <Appearance DEF='_1'>
                      <Material DEF='_2'
                          diffuseColor='0.2705882 0.2705882 0.2705882'
                          specularColor='0.8627451 0.8588235 0.8588235'/>
                      <ProtoInstance name='ToolShader' containerField='shaders'/>
                    </Appearance>
                    <Cylinder
                        top='false'
                        height='20'
                        radius='12'
                        solid='false'/>
                  </Shape>
                </Transform>
                <Transform DEF='Box_1'>
                  <Shape
                      castShadow='false'>
                    <Appearance USE='_1'/>
                    <Box
                        size='40 20 30'/>
                  </Shape>
                </Transform>
                <Transform DEF='RedLight'
                    translation='12 12 5'
                    scale='2.18 2.18 2.18'>
                  <IS>
                    <connect nodeField='visible' protoField='on'/>
                  </IS>
                  <Shape
                      castShadow='false'>
                    <Appearance>
                      <Material
                          diffuseColor='0 0 0'
                          specularColor='1 1 1'
                          emissiveColor='1 0 0'/>
                      <ProtoInstance name='ToolShader' DEF='_3' containerField='shaders'/>
                    </Appearance>
                    <Cylinder/>
                  </Shape>
                </Transform>
              </Transform>
            </ScreenGroup>
            <Transform DEF='Frustum'>
              <ProtoInstance name='BooleanSwitch'>
                <fieldValue name='children'>
                  <Shape DEF='_4'
                      castShadow='false'>
                    <Appearance>
                      <Material
                          emissiveColor='0.5686275 0.5568627 0.4392157'/>
                      <ProtoInstance name='ToolShader' USE='_3' containerField='shaders'/>
                    </Appearance>
                    <IndexedLineSet DEF='_5'
                        coordIndex='0, 4, -1, 4, 8, -1, 1, 5, -1, 5, 9, -1, 2, 6, -1, 6, 10, -1, 3, 7, -1, 7, 11, -1, 0, 1, 2, 3, 0, -1, 4, 5, 6, 7, 4, -1, 8, 9, 10, 11, 8, -1'>
                      <Coordinate DEF='_6'
                          point='0 0 0, 0 0 0, 0 0 0, 0 0 0, 1 1 1, -1 1 1, -1 -1 1, 1 -1 1, 2 2 2, -2 2 2, -2 -2 2, 2 -2 2'/>
                    </IndexedLineSet>
                  </Shape>
                  <Shape DEF='_7'
                      castShadow='false'>
                    <Appearance>
                      <Material
                          emissiveColor='1 0.985342 0.807597'/>
                      <ProtoInstance name='ToolShader' USE='_3' containerField='shaders'/>
                    </Appearance>
                    <IndexedLineSet USE='_5'/>
                  </Shape>
                </fieldValue>
                <IS>
                  <connect nodeField='whichChoice' protoField='selected'/>
                </IS>
              </ProtoInstance>
              <Shape DEF='Image'
                  castShadow='false'>
                <Appearance>
                  <UnlitMaterial DEF='_8'
                      transparency='0.75'>
                    <IS>
                      <connect nodeField='emissiveTexture' protoField='texture'/>
                    </IS>
                  </UnlitMaterial>
                </Appearance>
                <IndexedFaceSet
                    solid='false'
                    texCoordIndex='0, 1, 2, 3, -1'
                    coordIndex='4, 5, 6, 7, -1'>
                  <TextureCoordinate
                      point='1 1, 0 1, 0 0, 1 0'/>
                  <Coordinate USE='_6'/>
                </IndexedFaceSet>
              </Shape>
            </Transform>
          </Transform>
          <Transform DEF='TransformTool'>
            <IS>
              <connect nodeField='translation' protoField='location'/>
              <connect nodeField='visible' protoField='selected'/>
            </IS>
            <ScreenGroup>
              <Group
                  bboxSize='60 60 60'/>
            </ScreenGroup>
          </Transform>
        </Collision>
        <Script DEF='ToolScript'
            directOutput='true'>
          <field accessType='inputOutput' type='SFBool' name='selected'/>
          <field accessType='inputOutput' type='SFVec3f' name='direction'/>
          <field accessType='inputOutput' type='SFVec3f' name='upVector'/>
          <field accessType='inputOutput' type='SFRotation' name='rotation'/>
          <field accessType='inputOutput' type='MFFloat' name='parallelFieldOfView'/>
          <field accessType='inputOutput' type='SFFloat' name='parallelNearDistance'/>
          <field accessType='inputOutput' type='SFFloat' name='parallelFarDistance'/>
          <field accessType='inputOutput' type='SFFloat' name='parallelAspectRatio'/>
          <field accessType='inputOutput' type='SFFloat' name='perspectiveFieldOfView'/>
          <field accessType='inputOutput' type='SFFloat' name='perspectiveNearDistance'/>
          <field accessType='inputOutput' type='SFFloat' name='perspectiveFarDistance'/>
          <field accessType='inputOutput' type='SFFloat' name='perspectiveAspectRatio'/>
          <field accessType='initializeOnly' type='SFNode' name='projector'>
            <Transform USE='Projector'/>
          </field>
          <field accessType='initializeOnly' type='SFNode' name='frustum'>
            <Coordinate USE='_6'/>
          </field>
          <field accessType='initializeOnly' type='SFNode' name='frustumMaterial'>
            <Material USE='_2'/>
          </field>
          <field accessType='initializeOnly' type='SFNode' name='textureMaterial'>
            <UnlitMaterial USE='_8'/>
          </field>
          <field accessType='initializeOnly' type='SFNode' name='transform'>
            <Transform USE='TransformTool'/>
          </field>
          <IS>
            <connect nodeField='selected' protoField='selected'/>
            <connect nodeField='direction' protoField='direction'/>
            <connect nodeField='upVector' protoField='upVector'/>
            <connect nodeField='parallelFieldOfView' protoField='parallelFieldOfView'/>
            <connect nodeField='parallelNearDistance' protoField='parallelNearDistance'/>
            <connect nodeField='parallelFarDistance' protoField='parallelFarDistance'/>
            <connect nodeField='parallelAspectRatio' protoField='parallelAspectRatio'/>
            <connect nodeField='perspectiveFieldOfView' protoField='perspectiveFieldOfView'/>
            <connect nodeField='perspectiveNearDistance' protoField='perspectiveNearDistance'/>
            <connect nodeField='perspectiveFarDistance' protoField='perspectiveFarDistance'/>
            <connect nodeField='perspectiveAspectRatio' protoField='perspectiveAspectRatio'/>
          </IS>
<![CDATA[ecmascript:

async function initialize ()
{
   textureMaterial .getValue () .collectCloneCount = () => 0;

   const tool = await transform .getValue () .addTool () .getToolInstance ();

   tool .undo          = false;
   tool .tools         = new MFString ("TRANSLATE", "ROTATE");
   tool .centerDisplay = false;
   tool .bboxDisplay   = false;
}

function set_selected ()
{
   frustumMaterial .emissiveColor = selected
      ? new SFColor (0.1, 0.1, 0.1)
      : new SFColor ();
}

function set_direction ()
{
   set_directionAndUpVector ();
}

function set_upVector ()
{
   set_directionAndUpVector ();
}

function set_directionAndUpVector ()
{
   const rotation = new SFRotation (new SFVec3f (0, 0, 1), direction);

   transform .rotation = straightenHorizon (rotation);
}

function set_rotation ()
{
   // direction = transform .rotation .multVec (new SFVec3f (0, 0, 1));
   // upVector  = transform .rotation .multVec (new SFVec3f (0, 1, 0));
}

function straightenHorizon (orientation)
{
   const
      localXAxis = orientation .multVec (new SFVec3f (-1, 0, 0)),
      localZAxis = orientation .multVec (new SFVec3f (0, 0, 1)),
      upVectorN  = upVector .normalize (),
      vector     = localZAxis .cross (upVectorN);

   // If viewer looks along the up vector.
   if (Math .abs (localZAxis .dot (upVectorN)) >= 1)
      return orientation;

   if (Math .abs (vector .dot (localXAxis)) >= 1)
      return orientation;

   const rotation = new SFRotation (localXAxis, vector);

   return orientation .multiply (rotation);
}

function set_parallelFieldOfView ()
{
   set_parallel ();
}

function set_parallelNearDistance ()
{
   set_parallel ();
}

function set_parallelFarDistance ()
{
   set_parallel ();
}

function set_parallelAspectRatio ()
{
   set_parallel ();
}

function set_parallel ()
{
  const
    nearDistance = parallelNearDistance === -1 ? 0.125 : parallelNearDistance,
    farDistance  = parallelFarDistance === -1 ? 100_000 : parallelFarDistance;

   const
      fov    = parallelFieldOfView,
      minX   = fov .length > 0 ? fov [0] : -1,
      minY   = fov .length > 1 ? fov [1] : -1,
      maxX   = fov .length > 2 ? fov [2] :  1,
      maxY   = fov .length > 3 ? fov [3] :  1,
      sizeX  = maxX - minX,
      sizeY  = maxY - minY,
      aspect = parallelAspectRatio;

   if (aspect > sizeX / sizeY)
   {
      const
         center  = (minX + maxX) / 2,
         size1_2 = (sizeY * aspect) / 2;

      var
         x1 = center - size1_2,
         x2 = center + size1_2,
         y1 = minY,
         y2 = maxY;
   }
   else
   {
      const
         center  = (minY + maxY) / 2,
         size1_2 = (sizeX / aspect) / 2;

      var
         x1 = minX,
         x2 = maxX,
         y1 = center - size1_2,
         y2 = center + size1_2;
   }

   x1 = -x1;
   x2 = -x2;

   const parallel = false; // First point of frustum.

   if (parallel)
   {
      frustum .point [0] = new SFVec3f (x2, y2, 0);
      frustum .point [1] = new SFVec3f (x1, y2, 0);
      frustum .point [2] = new SFVec3f (x1, y1, 0);
      frustum .point [3] = new SFVec3f (x2, y1, 0);
   }
   else
   {
      frustum .point [0] = new SFVec3f ();
      frustum .point [1] = new SFVec3f ();
      frustum .point [2] = new SFVec3f ();
      frustum .point [3] = new SFVec3f ();
   }

   frustum .point [4] = new SFVec3f (x2, y2, nearDistance);
   frustum .point [5] = new SFVec3f (x1, y2, nearDistance);
   frustum .point [6] = new SFVec3f (x1, y1, nearDistance);
   frustum .point [7] = new SFVec3f (x2, y1, nearDistance);

   frustum .point [8]  = new SFVec3f (x2, y2, farDistance);
   frustum .point [9]  = new SFVec3f (x1, y2, farDistance);
   frustum .point [10] = new SFVec3f (x1, y1, farDistance);
   frustum .point [11] = new SFVec3f (x2, y1, farDistance);
}

function set_perspectiveFieldOfView ()
{
   set_perspective ();
}

function set_perspectiveNearDistance ()
{
   set_perspective ();
}

function set_perspectiveFarDistance ()
{
   set_perspective ();
}

function set_perspectiveAspectRatio ()
{
   set_perspective ();
}

function set_perspective ()
{
  const
    nearDistance = perspectiveNearDistance === -1 ? 0.125 : perspectiveNearDistance,
    farDistance  = perspectiveFarDistance === -1 ? 100_000 : perspectiveFarDistance;

   let fov = perspectiveFieldOfView;

   fov = fov > 0 && fov < Math .PI ? fov : Math .PI / 4;

   const
      n = Math .tan (fov / 2) * nearDistance,
      f = Math .tan (fov / 2) * farDistance;

   let
      w = 1,
      h = 1;

   if (perspectiveAspectRatio > 1)
      w = perspectiveAspectRatio;
   else
      h = 1 / perspectiveAspectRatio;

   frustum .point [0] = new SFVec3f ();
   frustum .point [1] = new SFVec3f ();
   frustum .point [2] = new SFVec3f ();
   frustum .point [3] = new SFVec3f ();

   frustum .point [4] = new SFVec3f (-n * w,  n * h, nearDistance);
   frustum .point [5] = new SFVec3f ( n * w,  n * h, nearDistance);
   frustum .point [6] = new SFVec3f ( n * w, -n * h, nearDistance);
   frustum .point [7] = new SFVec3f (-n * w, -n * h, nearDistance);

   frustum .point [8]  = new SFVec3f (-f * w,  f * h, farDistance);
   frustum .point [9]  = new SFVec3f ( f * w,  f * h, farDistance);
   frustum .point [10] = new SFVec3f ( f * w, -f * h, farDistance);
   frustum .point [11] = new SFVec3f (-f * w, -f * h, farDistance);
}
]]>
        </Script>
        <ROUTE fromNode='TransformTool' fromField='translation_changed' toNode='Projector' toField='set_translation'/>
        <ROUTE fromNode='TransformTool' fromField='rotation_changed' toNode='Projector' toField='set_rotation'/>
        <ROUTE fromNode='TransformTool' fromField='rotation_changed' toNode='ToolScript' toField='set_rotation'/>
      </ProtoBody>
    </ProtoDeclare>
    <ProtoInstance name='Tool'>
      <fieldValue name='selected' value='true'/>
      <fieldValue name='on' value='true'/>
      <fieldValue name='texture'>
        <PixelTexture
            image='2 2 3
              0xff0000 0xff00
              0xff 0xff00ff'/>
      </fieldValue>
    </ProtoInstance>
  </Scene>
</X3D>
