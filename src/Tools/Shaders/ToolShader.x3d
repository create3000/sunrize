<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 4.0//EN" "http://www.web3d.org/specifications/x3d-4.0.dtd">
<X3D profile='Interchange' version='4.0' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='http://www.web3d.org/specifications/x3d-4.0.xsd'>
  <head>
    <component name='Shaders' level='1'/>
    <meta name='comment' content='Rise and Shine'/>
    <meta name='created' content='Sun, 03 Aug 2014 14:00:40 GMT'/>
    <meta name='creator' content='Holger Seelig'/>
    <meta name='generator' content='Sunrize X3D Editor V1.7.1, https://create3000.github.io/sunrize/'/>
    <meta name='identifier' content='file:///Users/holger/Desktop/X_ITE/sunrize/src/sunrize/Tools/Shaders/ToolShader.x3d'/>
    <meta name='modified' content='Sat, 29 Jun 2024 11:30:31 GMT'/>
  </head>
  <Scene>
    <ProtoDeclare name='ToolShader'>
      <ProtoInterface>
        <field accessType='inputOutput' type='SFBool' name='instanced'/>
      </ProtoInterface>
      <ProtoBody>
        <ComposedShader DEF='ToolShader'
            language='GLSL'>
          <field accessType='inputOutput' type='SFBool' name='instanced'/>
          <IS>
            <connect nodeField='instanced' protoField='instanced'/>
          </IS>
          <ShaderPart DEF='ToolVertexShader'>
<![CDATA[data:text/plain,#version 300 es

precision highp float;

uniform mat4 x3d_ProjectionMatrix;
uniform mat4 x3d_ModelViewMatrix;
uniform mat3 x3d_NormalMatrix;

uniform x3d_PointPropertiesParameters x3d_PointProperties;

uniform bool instanced;

in mat4 x3d_InstanceMatrix;
in vec4 x3d_Vertex;
in vec3 x3d_Normal;

out vec3 vertex;
out vec3 normal;

void
main ()
{
   gl_PointSize = x3d_PointProperties .pointSizeScaleFactor;

   mat4 instancedMatrix = instanced ? x3d_InstanceMatrix : mat4 (1.0);

   vertex = vec3 (x3d_ModelViewMatrix * instancedMatrix * x3d_Vertex);
   normal = normalize (x3d_NormalMatrix * x3d_Normal);

   gl_Position = x3d_ProjectionMatrix * x3d_ModelViewMatrix * instancedMatrix * x3d_Vertex;
}
]]>
          </ShaderPart>
          <ShaderPart DEF='ToolFragmentShader'
              type='FRAGMENT'>
<![CDATA[data:text/plain,#version 300 es

precision highp float;

uniform x3d_MaterialParameters x3d_Material;

in vec3 vertex;
in vec3 normal;

out vec4 x3d_FragColor;

void
main ()
{
   vec3  finalColor = vec3 (0.0, 0.0, 0.0);
   float alpha      = 1.0 - x3d_Material .transparency;

   vec3 N = normalize (gl_FrontFacing ? normal : -normal);
   vec3 V = normalize (-vertex); // normalized vector from point on geometry to viewer's position

   vec3 d = vec3 (0.0, 0.0, -1.0); // light direction
   vec3 L = -d;
   vec3 H = normalize (L + V); // specular term

   vec3  diffuseColor   = x3d_Material .diffuseColor;
   vec3  diffuseTerm    = diffuseColor * max (dot (N, L), 0.0);
   float specularFactor = bool (x3d_Material .shininess) ? pow (max (dot (N, H), 0.0), x3d_Material .shininess * 128.0) : 1.0;
   vec3  specularTerm   = x3d_Material .specularColor * specularFactor;

   finalColor += diffuseTerm + specularTerm;
   finalColor += x3d_Material .emissiveColor;

   x3d_FragColor = vec4 (finalColor, alpha);
}
]]>
          </ShaderPart>
        </ComposedShader>
      </ProtoBody>
    </ProtoDeclare>
  </Scene>
</X3D>
